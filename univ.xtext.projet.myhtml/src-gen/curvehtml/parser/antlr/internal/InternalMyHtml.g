/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyHtml;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package curvehtml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package curvehtml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import curvehtml.services.MyHtmlGrammarAccess;

}

@parser::members {

 	private MyHtmlGrammarAccess grammarAccess;

    public InternalMyHtmlParser(TokenStream input, MyHtmlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "html_generator_program";
   	}

   	@Override
   	protected MyHtmlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulehtml_generator_program
entryRulehtml_generator_program returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHtml_generator_programRule()); }
	iv_rulehtml_generator_program=rulehtml_generator_program
	{ $current=$iv_rulehtml_generator_program.current; }
	EOF;

// Rule html_generator_program
rulehtml_generator_program returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHtml_generator_programAccess().getHtml_generator_programAction_0(),
					$current);
			}
		)
		otherlv_1='html_generator_program'
		{
			newLeafNode(otherlv_1, grammarAccess.getHtml_generator_programAccess().getHtml_generator_programKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getHtml_generator_programAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHtml_generator_programAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHtml_generator_programRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"curvehtml.MyHtml.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getHtml_generator_programAccess().getSemicolonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHtml_generator_programAccess().getStatementStatementParserRuleCall_4_1_0());
					}
					lv_statement_5_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHtml_generator_programRule());
						}
						add(
							$current,
							"statement",
							lv_statement_5_0,
							"curvehtml.MyHtml.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getHtml_generator_programAccess().getSemicolonKeyword_5());
		}
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getHtml_generator_programAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGraphParserRuleCall_0());
		}
		this_graph_0=rulegraph
		{
			$current = $this_graph_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCsv_loaderParserRuleCall_1());
		}
		this_csv_loader_1=rulecsv_loader
		{
			$current = $this_csv_loader_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulegraph
entryRulegraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	iv_rulegraph=rulegraph
	{ $current=$iv_rulegraph.current; }
	EOF;

// Rule graph
rulegraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGraphAccess().getGraphAction_0(),
					$current);
			}
		)
		otherlv_1='create'
		{
			newLeafNode(otherlv_1, grammarAccess.getGraphAccess().getCreateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"curvehtml.MyHtml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='style'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphAccess().getStyleKeyword_4());
		}
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getGraphAccess().getEqualsSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getStyleType_graphEnumRuleCall_6_0());
				}
				lv_style_6_0=ruletype_graph
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					set(
						$current,
						"style",
						lv_style_6_0,
						"curvehtml.MyHtml.type_graph");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getGraphAccess().getCommaKeyword_7());
		}
		otherlv_8='Xaxis'
		{
			newLeafNode(otherlv_8, grammarAccess.getGraphAccess().getXaxisKeyword_8());
		}
		otherlv_9='='
		{
			newLeafNode(otherlv_9, grammarAccess.getGraphAccess().getEqualsSignKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getX_axisEStringParserRuleCall_10_0());
				}
				lv_x_axis_10_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					set(
						$current,
						"x_axis",
						lv_x_axis_10_0,
						"curvehtml.MyHtml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=','
		{
			newLeafNode(otherlv_11, grammarAccess.getGraphAccess().getCommaKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getCurveCurveParserRuleCall_12_0());
				}
				lv_curve_12_0=rulecurve
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					add(
						$current,
						"curve",
						lv_curve_12_0,
						"curvehtml.MyHtml.curve");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_13=','
			{
				newLeafNode(otherlv_13, grammarAccess.getGraphAccess().getCommaKeyword_13_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphAccess().getCurveCurveParserRuleCall_13_1_0());
					}
					lv_curve_14_0=rulecurve
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphRule());
						}
						add(
							$current,
							"curve",
							lv_curve_14_0,
							"curvehtml.MyHtml.curve");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_14());
		}
	)
;

// Entry rule entryRulecsv_loader
entryRulecsv_loader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsv_loaderRule()); }
	iv_rulecsv_loader=rulecsv_loader
	{ $current=$iv_rulecsv_loader.current; }
	EOF;

// Rule csv_loader
rulecsv_loader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCsv_loaderAccess().getCsv_loaderAction_0(),
					$current);
			}
		)
		otherlv_1='open'
		{
			newLeafNode(otherlv_1, grammarAccess.getCsv_loaderAccess().getOpenKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCsv_loaderAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCsv_loaderAccess().getFile_nameEStringParserRuleCall_3_0());
				}
				lv_file_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCsv_loaderRule());
					}
					set(
						$current,
						"file_name",
						lv_file_name_3_0,
						"curvehtml.MyHtml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getCsv_loaderAccess().getCommaKeyword_4_0());
			}
			otherlv_5='sep'
			{
				newLeafNode(otherlv_5, grammarAccess.getCsv_loaderAccess().getSepKeyword_4_1());
			}
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getCsv_loaderAccess().getEqualsSignKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCsv_loaderAccess().getSeparatorEStringParserRuleCall_4_3_0());
					}
					lv_separator_7_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCsv_loaderRule());
						}
						set(
							$current,
							"separator",
							lv_separator_7_0,
							"curvehtml.MyHtml.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getCsv_loaderAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulecurve
entryRulecurve returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCurveRule()); }
	iv_rulecurve=rulecurve
	{ $current=$iv_rulecurve.current; }
	EOF;

// Rule curve
rulecurve returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCurveAccess().getCurveAction_0(),
					$current);
			}
		)
		otherlv_1='curve'
		{
			newLeafNode(otherlv_1, grammarAccess.getCurveAccess().getCurveKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCurveAccess().getLeftParenthesisKeyword_2());
		}
		(
			otherlv_3='label_name'
			{
				newLeafNode(otherlv_3, grammarAccess.getCurveAccess().getLabel_nameKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getCurveAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCurveAccess().getLabel_nameEStringParserRuleCall_3_2_0());
					}
					lv_label_name_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCurveRule());
						}
						set(
							$current,
							"label_name",
							lv_label_name_5_0,
							"curvehtml.MyHtml.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getCurveAccess().getCommaKeyword_4_0());
			}
			otherlv_7='legend'
			{
				newLeafNode(otherlv_7, grammarAccess.getCurveAccess().getLegendKeyword_4_1());
			}
			otherlv_8='='
			{
				newLeafNode(otherlv_8, grammarAccess.getCurveAccess().getEqualsSignKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCurveAccess().getLegendEStringParserRuleCall_4_3_0());
					}
					lv_legend_9_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCurveRule());
						}
						set(
							$current,
							"legend",
							lv_legend_9_0,
							"curvehtml.MyHtml.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getCurveAccess().getCommaKeyword_5_0());
			}
			otherlv_11='color'
			{
				newLeafNode(otherlv_11, grammarAccess.getCurveAccess().getColorKeyword_5_1());
			}
			otherlv_12='='
			{
				newLeafNode(otherlv_12, grammarAccess.getCurveAccess().getEqualsSignKeyword_5_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCurveAccess().getColorList_colorEnumRuleCall_5_3_0());
					}
					lv_color_13_0=rulelist_color
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCurveRule());
						}
						set(
							$current,
							"color",
							lv_color_13_0,
							"curvehtml.MyHtml.list_color");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getCurveAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule type_graph
ruletype_graph returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='bar'
			{
				$current = grammarAccess.getType_graphAccess().getBarEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getType_graphAccess().getBarEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='line'
			{
				$current = grammarAccess.getType_graphAccess().getLineEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getType_graphAccess().getLineEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='radar'
			{
				$current = grammarAccess.getType_graphAccess().getRadarEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getType_graphAccess().getRadarEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='doughnut'
			{
				$current = grammarAccess.getType_graphAccess().getDoughnutEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getType_graphAccess().getDoughnutEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='pie'
			{
				$current = grammarAccess.getType_graphAccess().getPieEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getType_graphAccess().getPieEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule list_color
rulelist_color returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='red'
			{
				$current = grammarAccess.getList_colorAccess().getRedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getList_colorAccess().getRedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='orange'
			{
				$current = grammarAccess.getList_colorAccess().getOrangeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getList_colorAccess().getOrangeEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='yellow'
			{
				$current = grammarAccess.getList_colorAccess().getYellowEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getList_colorAccess().getYellowEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='green'
			{
				$current = grammarAccess.getList_colorAccess().getGreenEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getList_colorAccess().getGreenEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='blue'
			{
				$current = grammarAccess.getList_colorAccess().getBlueEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getList_colorAccess().getBlueEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='purple'
			{
				$current = grammarAccess.getList_colorAccess().getPurpleEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getList_colorAccess().getPurpleEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='grey'
			{
				$current = grammarAccess.getList_colorAccess().getGreyEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getList_colorAccess().getGreyEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='pink'
			{
				$current = grammarAccess.getList_colorAccess().getPinkEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getList_colorAccess().getPinkEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='lime'
			{
				$current = grammarAccess.getList_colorAccess().getLimeEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getList_colorAccess().getLimeEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='teal'
			{
				$current = grammarAccess.getList_colorAccess().getTealEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getList_colorAccess().getTealEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='cyan'
			{
				$current = grammarAccess.getList_colorAccess().getCyanEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getList_colorAccess().getCyanEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='indigo'
			{
				$current = grammarAccess.getList_colorAccess().getIndigoEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getList_colorAccess().getIndigoEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='brown'
			{
				$current = grammarAccess.getList_colorAccess().getBrownEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getList_colorAccess().getBrownEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='amber'
			{
				$current = grammarAccess.getList_colorAccess().getAmberEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getList_colorAccess().getAmberEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='black'
			{
				$current = grammarAccess.getList_colorAccess().getBlackEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getList_colorAccess().getBlackEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='white'
			{
				$current = grammarAccess.getList_colorAccess().getWhiteEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getList_colorAccess().getWhiteEnumLiteralDeclaration_15());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
