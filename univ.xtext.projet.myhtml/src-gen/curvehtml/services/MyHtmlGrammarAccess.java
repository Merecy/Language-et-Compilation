/*
 * generated by Xtext 2.25.0
 */
package curvehtml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyHtmlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class Html_generator_programElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.html_generator_program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHtml_generator_programAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHtml_generator_programKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStatementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_4_1_0 = (RuleCall)cStatementAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//html_generator_program returns html_generator_program:
		//    {html_generator_program}
		//    'html_generator_program'
		//    '{'
		//        statement+=statement ( ";"
		//        statement+=statement)*  ";"
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{html_generator_program}
		//'html_generator_program'
		//'{'
		//    statement+=statement ( ";"
		//    statement+=statement)*  ";"
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{html_generator_program}
		public Action getHtml_generator_programAction_0() { return cHtml_generator_programAction_0; }
		
		//'html_generator_program'
		public Keyword getHtml_generator_programKeyword_1() { return cHtml_generator_programKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statement+=statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//( ";"
		//       statement+=statement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//statement+=statement
		public Assignment getStatementAssignment_4_1() { return cStatementAssignment_4_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_4_1_0() { return cStatementStatementParserRuleCall_4_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraphParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCsv_loaderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//statement returns statement:
		//    graph | csv_loader;
		@Override public ParserRule getRule() { return rule; }
		
		//graph | csv_loader
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//graph
		public RuleCall getGraphParserRuleCall_0() { return cGraphParserRuleCall_0; }
		
		//csv_loader
		public RuleCall getCsv_loaderParserRuleCall_1() { return cCsv_loaderParserRuleCall_1; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStyleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStyleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStyleType_graphEnumRuleCall_6_0 = (RuleCall)cStyleAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cXaxisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cX_axisAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cX_axisEStringParserRuleCall_10_0 = (RuleCall)cX_axisAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cCurveAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCurveCurveParserRuleCall_12_0 = (RuleCall)cCurveAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cCurveAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cCurveCurveParserRuleCall_13_1_0 = (RuleCall)cCurveAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//graph returns graph:
		//    {graph}
		//    'create'
		//    name=EString
		//    '{'
		//        'style' '=' style=type_graph ','
		//        'Xaxis' '=' x_axis=EString ','
		//         curve+=curve ( "," curve+=curve)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{graph}
		//'create'
		//name=EString
		//'{'
		//    'style' '=' style=type_graph ','
		//    'Xaxis' '=' x_axis=EString ','
		//     curve+=curve ( "," curve+=curve)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{graph}
		public Action getGraphAction_0() { return cGraphAction_0; }
		
		//'create'
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'style'
		public Keyword getStyleKeyword_4() { return cStyleKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//style=type_graph
		public Assignment getStyleAssignment_6() { return cStyleAssignment_6; }
		
		//type_graph
		public RuleCall getStyleType_graphEnumRuleCall_6_0() { return cStyleType_graphEnumRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'Xaxis'
		public Keyword getXaxisKeyword_8() { return cXaxisKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//x_axis=EString
		public Assignment getX_axisAssignment_10() { return cX_axisAssignment_10; }
		
		//EString
		public RuleCall getX_axisEStringParserRuleCall_10_0() { return cX_axisEStringParserRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//curve+=curve
		public Assignment getCurveAssignment_12() { return cCurveAssignment_12; }
		
		//curve
		public RuleCall getCurveCurveParserRuleCall_12_0() { return cCurveCurveParserRuleCall_12_0; }
		
		//( "," curve+=curve)*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//curve+=curve
		public Assignment getCurveAssignment_13_1() { return cCurveAssignment_13_1; }
		
		//curve
		public RuleCall getCurveCurveParserRuleCall_13_1_0() { return cCurveCurveParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class Csv_loaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.csv_loader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCsv_loaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFile_nameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFile_nameEStringParserRuleCall_3_0 = (RuleCall)cFile_nameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cSepKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cSeparatorAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cSeparatorEStringParserRuleCall_4_3_0 = (RuleCall)cSeparatorAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//csv_loader returns csv_loader:
		//    {csv_loader}
		//    'open'
		//    '('
		//    file_name=EString
		//    (',''sep''='separator=EString)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{csv_loader}
		//'open'
		//'('
		//file_name=EString
		//(',''sep''='separator=EString)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{csv_loader}
		public Action getCsv_loaderAction_0() { return cCsv_loaderAction_0; }
		
		//'open'
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//file_name=EString
		public Assignment getFile_nameAssignment_3() { return cFile_nameAssignment_3; }
		
		//EString
		public RuleCall getFile_nameEStringParserRuleCall_3_0() { return cFile_nameEStringParserRuleCall_3_0; }
		
		//(',''sep''='separator=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'sep'
		public Keyword getSepKeyword_4_1() { return cSepKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//separator=EString
		public Assignment getSeparatorAssignment_4_3() { return cSeparatorAssignment_4_3; }
		
		//EString
		public RuleCall getSeparatorEStringParserRuleCall_4_3_0() { return cSeparatorEStringParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CurveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.curve");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCurveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCurveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabel_nameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLabel_nameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLabel_nameEStringParserRuleCall_3_2_0 = (RuleCall)cLabel_nameAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLegendKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cLegendAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cLegendEStringParserRuleCall_4_3_0 = (RuleCall)cLegendAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColorKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cColorAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cColorList_colorEnumRuleCall_5_3_0 = (RuleCall)cColorAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//curve returns curve:
		//    {curve}
		//    'curve'
		//    '('
		//    ('label_name' '=' label_name=EString)?
		//    (',''legend' '=' legend=EString)?
		//    (',''color' '=' color=list_color)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{curve}
		//'curve'
		//'('
		//('label_name' '=' label_name=EString)?
		//(',''legend' '=' legend=EString)?
		//(',''color' '=' color=list_color)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{curve}
		public Action getCurveAction_0() { return cCurveAction_0; }
		
		//'curve'
		public Keyword getCurveKeyword_1() { return cCurveKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('label_name' '=' label_name=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'label_name'
		public Keyword getLabel_nameKeyword_3_0() { return cLabel_nameKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//label_name=EString
		public Assignment getLabel_nameAssignment_3_2() { return cLabel_nameAssignment_3_2; }
		
		//EString
		public RuleCall getLabel_nameEStringParserRuleCall_3_2_0() { return cLabel_nameEStringParserRuleCall_3_2_0; }
		
		//(',''legend' '=' legend=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'legend'
		public Keyword getLegendKeyword_4_1() { return cLegendKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//legend=EString
		public Assignment getLegendAssignment_4_3() { return cLegendAssignment_4_3; }
		
		//EString
		public RuleCall getLegendEStringParserRuleCall_4_3_0() { return cLegendEStringParserRuleCall_4_3_0; }
		
		//(',''color' '=' color=list_color)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//'color'
		public Keyword getColorKeyword_5_1() { return cColorKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//color=list_color
		public Assignment getColorAssignment_5_3() { return cColorAssignment_5_3; }
		
		//list_color
		public RuleCall getColorList_colorEnumRuleCall_5_3_0() { return cColorList_colorEnumRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class Type_graphElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.type_graph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBarEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBarBarKeyword_0_0 = (Keyword)cBarEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLineLineKeyword_1_0 = (Keyword)cLineEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRadarEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRadarRadarKeyword_2_0 = (Keyword)cRadarEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoughnutEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoughnutDoughnutKeyword_3_0 = (Keyword)cDoughnutEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPieEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPiePieKeyword_4_0 = (Keyword)cPieEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum type_graph returns type_graph:
		//            bar = 'bar' | line = 'line' | radar = 'radar' | doughnut = 'doughnut' | pie = 'pie';
		public EnumRule getRule() { return rule; }
		
		//bar = 'bar' | line = 'line' | radar = 'radar' | doughnut = 'doughnut' | pie = 'pie'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bar = 'bar'
		public EnumLiteralDeclaration getBarEnumLiteralDeclaration_0() { return cBarEnumLiteralDeclaration_0; }
		
		//'bar'
		public Keyword getBarBarKeyword_0_0() { return cBarBarKeyword_0_0; }
		
		//line = 'line'
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_1() { return cLineEnumLiteralDeclaration_1; }
		
		//'line'
		public Keyword getLineLineKeyword_1_0() { return cLineLineKeyword_1_0; }
		
		//radar = 'radar'
		public EnumLiteralDeclaration getRadarEnumLiteralDeclaration_2() { return cRadarEnumLiteralDeclaration_2; }
		
		//'radar'
		public Keyword getRadarRadarKeyword_2_0() { return cRadarRadarKeyword_2_0; }
		
		//doughnut = 'doughnut'
		public EnumLiteralDeclaration getDoughnutEnumLiteralDeclaration_3() { return cDoughnutEnumLiteralDeclaration_3; }
		
		//'doughnut'
		public Keyword getDoughnutDoughnutKeyword_3_0() { return cDoughnutDoughnutKeyword_3_0; }
		
		//pie = 'pie'
		public EnumLiteralDeclaration getPieEnumLiteralDeclaration_4() { return cPieEnumLiteralDeclaration_4; }
		
		//'pie'
		public Keyword getPiePieKeyword_4_0() { return cPiePieKeyword_4_0; }
	}
	public class List_colorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "curvehtml.MyHtml.list_color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRedRedKeyword_0_0 = (Keyword)cRedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrangeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrangeOrangeKeyword_1_0 = (Keyword)cOrangeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cYellowEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cYellowYellowKeyword_2_0 = (Keyword)cYellowEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreenGreenKeyword_3_0 = (Keyword)cGreenEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBlueBlueKeyword_4_0 = (Keyword)cBlueEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPurpleEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPurplePurpleKeyword_5_0 = (Keyword)cPurpleEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGreyEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGreyGreyKeyword_6_0 = (Keyword)cGreyEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPinkEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPinkPinkKeyword_7_0 = (Keyword)cPinkEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLimeEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLimeLimeKeyword_8_0 = (Keyword)cLimeEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTealEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTealTealKeyword_9_0 = (Keyword)cTealEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cCyanEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cCyanCyanKeyword_10_0 = (Keyword)cCyanEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cIndigoEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cIndigoIndigoKeyword_11_0 = (Keyword)cIndigoEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cBrownEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cBrownBrownKeyword_12_0 = (Keyword)cBrownEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cAmberEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cAmberAmberKeyword_13_0 = (Keyword)cAmberEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cBlackBlackKeyword_14_0 = (Keyword)cBlackEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cWhiteWhiteKeyword_15_0 = (Keyword)cWhiteEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum list_color returns list_color:
		//            red | orange | yellow | green | blue | purple | grey | pink | lime | teal | cyan | indigo | brown | amber | black | white;
		public EnumRule getRule() { return rule; }
		
		//red | orange | yellow | green | blue | purple | grey | pink | lime | teal | cyan | indigo | brown | amber | black | white
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//red
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_0() { return cRedEnumLiteralDeclaration_0; }
		
		public Keyword getRedRedKeyword_0_0() { return cRedRedKeyword_0_0; }
		
		//orange
		public EnumLiteralDeclaration getOrangeEnumLiteralDeclaration_1() { return cOrangeEnumLiteralDeclaration_1; }
		
		public Keyword getOrangeOrangeKeyword_1_0() { return cOrangeOrangeKeyword_1_0; }
		
		//yellow
		public EnumLiteralDeclaration getYellowEnumLiteralDeclaration_2() { return cYellowEnumLiteralDeclaration_2; }
		
		public Keyword getYellowYellowKeyword_2_0() { return cYellowYellowKeyword_2_0; }
		
		//green
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_3() { return cGreenEnumLiteralDeclaration_3; }
		
		public Keyword getGreenGreenKeyword_3_0() { return cGreenGreenKeyword_3_0; }
		
		//blue
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_4() { return cBlueEnumLiteralDeclaration_4; }
		
		public Keyword getBlueBlueKeyword_4_0() { return cBlueBlueKeyword_4_0; }
		
		//purple
		public EnumLiteralDeclaration getPurpleEnumLiteralDeclaration_5() { return cPurpleEnumLiteralDeclaration_5; }
		
		public Keyword getPurplePurpleKeyword_5_0() { return cPurplePurpleKeyword_5_0; }
		
		//grey
		public EnumLiteralDeclaration getGreyEnumLiteralDeclaration_6() { return cGreyEnumLiteralDeclaration_6; }
		
		public Keyword getGreyGreyKeyword_6_0() { return cGreyGreyKeyword_6_0; }
		
		//pink
		public EnumLiteralDeclaration getPinkEnumLiteralDeclaration_7() { return cPinkEnumLiteralDeclaration_7; }
		
		public Keyword getPinkPinkKeyword_7_0() { return cPinkPinkKeyword_7_0; }
		
		//lime
		public EnumLiteralDeclaration getLimeEnumLiteralDeclaration_8() { return cLimeEnumLiteralDeclaration_8; }
		
		public Keyword getLimeLimeKeyword_8_0() { return cLimeLimeKeyword_8_0; }
		
		//teal
		public EnumLiteralDeclaration getTealEnumLiteralDeclaration_9() { return cTealEnumLiteralDeclaration_9; }
		
		public Keyword getTealTealKeyword_9_0() { return cTealTealKeyword_9_0; }
		
		//cyan
		public EnumLiteralDeclaration getCyanEnumLiteralDeclaration_10() { return cCyanEnumLiteralDeclaration_10; }
		
		public Keyword getCyanCyanKeyword_10_0() { return cCyanCyanKeyword_10_0; }
		
		//indigo
		public EnumLiteralDeclaration getIndigoEnumLiteralDeclaration_11() { return cIndigoEnumLiteralDeclaration_11; }
		
		public Keyword getIndigoIndigoKeyword_11_0() { return cIndigoIndigoKeyword_11_0; }
		
		//brown
		public EnumLiteralDeclaration getBrownEnumLiteralDeclaration_12() { return cBrownEnumLiteralDeclaration_12; }
		
		public Keyword getBrownBrownKeyword_12_0() { return cBrownBrownKeyword_12_0; }
		
		//amber
		public EnumLiteralDeclaration getAmberEnumLiteralDeclaration_13() { return cAmberEnumLiteralDeclaration_13; }
		
		public Keyword getAmberAmberKeyword_13_0() { return cAmberAmberKeyword_13_0; }
		
		//black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_14() { return cBlackEnumLiteralDeclaration_14; }
		
		public Keyword getBlackBlackKeyword_14_0() { return cBlackBlackKeyword_14_0; }
		
		//white
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_15() { return cWhiteEnumLiteralDeclaration_15; }
		
		public Keyword getWhiteWhiteKeyword_15_0() { return cWhiteWhiteKeyword_15_0; }
	}
	
	private final Html_generator_programElements pHtml_generator_program;
	private final StatementElements pStatement;
	private final GraphElements pGraph;
	private final Csv_loaderElements pCsv_loader;
	private final Type_graphElements eType_graph;
	private final List_colorElements eList_color;
	private final CurveElements pCurve;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyHtmlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHtml_generator_program = new Html_generator_programElements();
		this.pStatement = new StatementElements();
		this.pGraph = new GraphElements();
		this.pCsv_loader = new Csv_loaderElements();
		this.eType_graph = new Type_graphElements();
		this.eList_color = new List_colorElements();
		this.pCurve = new CurveElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("curvehtml.MyHtml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//html_generator_program returns html_generator_program:
	//    {html_generator_program}
	//    'html_generator_program'
	//    '{'
	//        statement+=statement ( ";"
	//        statement+=statement)*  ";"
	//    '}';
	public Html_generator_programElements getHtml_generator_programAccess() {
		return pHtml_generator_program;
	}
	
	public ParserRule getHtml_generator_programRule() {
		return getHtml_generator_programAccess().getRule();
	}
	
	//statement returns statement:
	//    graph | csv_loader;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//graph returns graph:
	//    {graph}
	//    'create'
	//    name=EString
	//    '{'
	//        'style' '=' style=type_graph ','
	//        'Xaxis' '=' x_axis=EString ','
	//         curve+=curve ( "," curve+=curve)*
	//    '}';
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//csv_loader returns csv_loader:
	//    {csv_loader}
	//    'open'
	//    '('
	//    file_name=EString
	//    (',''sep''='separator=EString)?
	//    ')';
	public Csv_loaderElements getCsv_loaderAccess() {
		return pCsv_loader;
	}
	
	public ParserRule getCsv_loaderRule() {
		return getCsv_loaderAccess().getRule();
	}
	
	//enum type_graph returns type_graph:
	//            bar = 'bar' | line = 'line' | radar = 'radar' | doughnut = 'doughnut' | pie = 'pie';
	public Type_graphElements getType_graphAccess() {
		return eType_graph;
	}
	
	public EnumRule getType_graphRule() {
		return getType_graphAccess().getRule();
	}
	
	//enum list_color returns list_color:
	//            red | orange | yellow | green | blue | purple | grey | pink | lime | teal | cyan | indigo | brown | amber | black | white;
	public List_colorElements getList_colorAccess() {
		return eList_color;
	}
	
	public EnumRule getList_colorRule() {
		return getList_colorAccess().getRule();
	}
	
	//curve returns curve:
	//    {curve}
	//    'curve'
	//    '('
	//    ('label_name' '=' label_name=EString)?
	//    (',''legend' '=' legend=EString)?
	//    (',''color' '=' color=list_color)?
	//    ')';
	public CurveElements getCurveAccess() {
		return pCurve;
	}
	
	public ParserRule getCurveRule() {
		return getCurveAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
