/**
 * generated by Xtext 2.25.0
 */
package curvehtml.formatting2;

import com.google.inject.Inject;
import curveHTLM.curve;
import curveHTLM.graph;
import curveHTLM.html_generator_program;
import curveHTLM.statement;
import curvehtml.services.MyHtmlGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class MyHtmlFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyHtmlGrammarAccess _myHtmlGrammarAccess;
  
  protected void _format(final html_generator_program html_generator_program, @Extension final IFormattableDocument document) {
    EList<statement> _statement = html_generator_program.getStatement();
    for (final statement statement : _statement) {
      document.<curveHTLM.statement>format(statement);
    }
  }
  
  protected void _format(final graph graph, @Extension final IFormattableDocument document) {
    EList<curve> _curve = graph.getCurve();
    for (final curve curve : _curve) {
      document.<curveHTLM.curve>format(curve);
    }
  }
  
  public void format(final Object graph, final IFormattableDocument document) {
    if (graph instanceof XtextResource) {
      _format((XtextResource)graph, document);
      return;
    } else if (graph instanceof curveHTLM.graph) {
      _format((curveHTLM.graph)graph, document);
      return;
    } else if (graph instanceof html_generator_program) {
      _format((html_generator_program)graph, document);
      return;
    } else if (graph instanceof EObject) {
      _format((EObject)graph, document);
      return;
    } else if (graph == null) {
      _format((Void)null, document);
      return;
    } else if (graph != null) {
      _format(graph, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(graph, document).toString());
    }
  }
}
