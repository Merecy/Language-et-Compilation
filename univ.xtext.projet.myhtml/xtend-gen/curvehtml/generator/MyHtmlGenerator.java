/**
 * generated by Xtext 2.25.0
 */
package curvehtml.generator;

import com.google.common.base.Objects;
import curveHTLM.csv_loader;
import curveHTLM.curve;
import curveHTLM.graph;
import curveHTLM.html_generator_program;
import curveHTLM.list_color;
import curveHTLM.statement;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.ArrayExtensions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyHtmlGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    html_generator_program prog = ((html_generator_program) _head);
    String style = "";
    String csv_name = "";
    String x_axis = "";
    String courbe = "";
    String separator = "";
    List<String> arguments = new ArrayList<String>();
    EList<statement> _statement = prog.getStatement();
    for (final statement s : _statement) {
      {
        if ((s instanceof graph)) {
          style = ((graph)s).getStyle().toString();
          x_axis = ((graph)s).getX_axis().toString();
          arguments.add(((graph)s).getX_axis().toString());
          EList<curve> _curve = ((graph)s).getCurve();
          for (final curve curve : _curve) {
            {
              String _courbe = courbe;
              String _courbe_1 = this.getcourbe(curve);
              courbe = (_courbe + _courbe_1);
              arguments.add(curve.getLabel_name().toString());
            }
          }
        }
        if ((s instanceof csv_loader)) {
          String _csv_name = csv_name;
          String _file_name = ((csv_loader)s).getFile_name();
          csv_name = (_csv_name + _file_name);
          String _separator = separator;
          String _separator_1 = ((csv_loader)s).getSeparator();
          separator = (_separator + _separator_1);
        }
      }
    }
    String data = this.getdata(csv_name, separator, arguments);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<canvas id=\"myChart\"></canvas>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder.newLine();
    _builder.append("<!-- <script src=\"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js\"></script> -->");
    _builder.newLine();
    _builder.append("<script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("const data = [");
    _builder.newLine();
    _builder.append(data);
    _builder.newLineIfNotEmpty();
    _builder.append("];");
    _builder.newLine();
    _builder.append("new Chart(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("document.getElementById(\'myChart\'),");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("type: \'");
    _builder.append(style, "      ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("data: {");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("labels: data.map(row => row.");
    _builder.append(x_axis, "              ");
    _builder.append("),");
    _builder.newLineIfNotEmpty();
    _builder.append("              ");
    _builder.append("datasets: [");
    _builder.newLine();
    _builder.append("              ");
    _builder.append(courbe, "              ");
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append(");");
    _builder.newLine();
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    String html = _builder.toString();
    String inputFile = resource.getURI().trimFragment().lastSegment().toString();
    String _substring = inputFile.substring(0, inputFile.lastIndexOf("."));
    String outputFile = (_substring + ".html");
    fsa.generateFile(outputFile, html);
  }
  
  public String getcourbe(final curve c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("label: \'");
    String _string = c.getLegend().toString();
    _builder.append(_string, "  ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("data: data.map(row => row.");
    String _syntax = this.syntax(c.getLabel_name().toString());
    _builder.append(_syntax, "  ");
    _builder.append("),");
    _builder.newLineIfNotEmpty();
    String res = _builder.toString();
    list_color _color = c.getColor();
    boolean _notEquals = (!Objects.equal(_color, null));
    if (_notEquals) {
      String _res = res;
      list_color _color_1 = c.getColor();
      String _plus = ("\tbackgroundColor :\'" + _color_1);
      String _plus_1 = (_plus + "\',\n");
      res = (_res + _plus_1);
      String _res_1 = res;
      list_color _color_2 = c.getColor();
      String _plus_2 = ("\tborderColor :\'" + _color_2);
      String _plus_3 = (_plus_2 + "\',\n");
      res = (_res_1 + _plus_3);
    }
    String _res_2 = res;
    res = (_res_2 + "},\n");
    return res;
  }
  
  public String syntax(final String s) {
    String res = "";
    res = s.replace("(", "_").replace(")", "_").replace(" ", "_").replace("-", "_");
    return res.toString();
  }
  
  public String getdata(final String csvFile, final String cvsSplitBy, final List<String> arguments) {
    List<Integer> order = new ArrayList<Integer>();
    StringBuilder res = new StringBuilder();
    String line = "";
    for (int a = 0; (a < arguments.size()); a++) {
      order.add(Integer.valueOf(a));
    }
    try (BufferedReader br = new Function0<BufferedReader>() {
      @Override
      public BufferedReader apply() {
        try {
          FileReader _fileReader = new FileReader(csvFile);
          return new BufferedReader(_fileReader);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      }
    }.apply()) {
      line = br.readLine();
      String[] entry = line.split(cvsSplitBy);
      for (int i = 0; (i < arguments.size()); i++) {
        boolean _contains = ArrayExtensions.contains(entry, arguments.get(i));
        boolean _not = (!_contains);
        if (_not) {
          String _get = arguments.get(i);
          String _plus = ("Error in label name \"" + _get);
          String _plus_1 = (_plus + "\", please check");
          throw new IOException(_plus_1);
        }
      }
      for (int j = 0; (j < arguments.size()); j++) {
        {
          String arg = arguments.get(j);
          for (int i = 0; (i < entry.length); i++) {
            boolean _equals = (entry[i]).equals(arg);
            if (_equals) {
              order.set(j, Integer.valueOf(i));
            }
          }
        }
      }
      while ((!Objects.equal((line = br.readLine()), null))) {
        {
          String[] data = line.split(cvsSplitBy);
          if (((data.length > 1) && (!(data[0]).matches("(?i)STRING|DOUBLE|INT|CAT")))) {
            res.append("{");
            for (int i = 0; (i < arguments.size()); i++) {
              int _length = data.length;
              Integer _get = order.get(i);
              boolean _greaterThan = (_length > (_get).intValue());
              if (_greaterThan) {
                String _syntax = this.syntax(arguments.get(i));
                String _plus = (_syntax + ":\"");
                String _get_1 = data[(order.get(i)).intValue()];
                String _plus_1 = (_plus + _get_1);
                String _plus_2 = (_plus_1 + "\", ");
                res.append(_plus_2);
              } else {
                String _syntax_1 = this.syntax(arguments.get(i));
                String _plus_3 = (_syntax_1 + ":\"");
                String _plus_4 = (_plus_3 + "\", ");
                res.append(_plus_4);
              }
            }
            res.append("},\n");
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
        final IOException e = (IOException)_t;
        e.printStackTrace();
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return res.toString();
  }
}
